<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eduardo Nunes</title>
    <link>http://nunes.io/</link>
    <description>Recent content on Eduardo Nunes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 10 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://nunes.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Draw! NodeJS and Go, Count to 1 Billion With a B!</title>
      <link>http://nunes.io/notes/article/nodejs-and-go-count-to-1-billion/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/article/nodejs-and-go-count-to-1-billion/</guid>
      <description>&lt;p&gt;Very nice article comparing performance, latency, memory usage and size between
simple web services written in nodejs and golang.&lt;/p&gt;

&lt;p&gt;Although the article is titled as a draw it points out by metrics that golang is
a winner.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The things that drove my attention are the very low memory footprint of golang
and the minimum size of a Docker image running the service. Considering the
amount of resources required to develop and run microservices, at least in
small / medium companies with limited resources, golang seems to be the best
option.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>The Case for Bringing Swift to the Server</title>
      <link>http://nunes.io/notes/talk/the-case-for-bringing-swift-to-the-server/</link>
      <pubDate>Sun, 10 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/talk/the-case-for-bringing-swift-to-the-server/</guid>
      <description>&lt;p&gt;The talk presented by Patrick Bohrer and Chris Bailey shows lots of things
related to Swift Language, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The current status of the server side implementation of Swift;&lt;/li&gt;
&lt;li&gt;The roadmap to bring Swift to server environment;&lt;/li&gt;
&lt;li&gt;The effort IBM is investing on Swift;&lt;/li&gt;
&lt;li&gt;Some of the tools created by IBM in order to promote / enable Swift, specially
on server side;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It demonstrates that Swift on server side has a strong, professional and
reliable evolution plan.&lt;/p&gt;

&lt;p&gt;The talk doesn&amp;rsquo;t mention anything about performance, except some improvements
made by IBM in the core of Swift itself, however it doesn&amp;rsquo;t how any benchmark or
even more information about the internals of Swift port to the server.&lt;/p&gt;

&lt;p&gt;One of the things that I&amp;rsquo;m not sure yet related to Swift is its memory footprint
compared to other programming languages like &lt;strong&gt;golang&lt;/strong&gt; and &lt;strong&gt;nodejs&lt;/strong&gt;,
specially because this is one of the key aspects when dealing with
microservices.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to deploy software</title>
      <link>http://nunes.io/notes/article/how-to-deploy-software/</link>
      <pubDate>Fri, 11 Mar 2016 17:09:00 -0300</pubDate>
      
      <guid>http://nunes.io/notes/article/how-to-deploy-software/</guid>
      <description>&lt;p&gt;This is a very nice and large article that tackles all aspects of deploying
software. He talks about the experience lived in big companies and emphasizes
how important it is to small and medium sized companies too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim: How to setup local eslint (or any other linter)?</title>
      <link>http://nunes.io/notes/guide/vim-how-to-setup-eslint/</link>
      <pubDate>Fri, 11 Mar 2016 14:18:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/guide/vim-how-to-setup-eslint/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update (2016-03-11): this note contains instructions to setup any nodejs
linter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been using source code linting for two years. It is a simple step in the
development workflow that together with other best-practices improves
readability and maintainability of the source code.&lt;/p&gt;

&lt;p&gt;The integration of most part of the linters with Atom editor is usually a very
simple task however to integrate them with Vim or Emacs a small effort is
needed. To integrate ESLint with Vim you can use
&lt;a href=&#34;https://github.com/scrooloose/syntastic&#34; target=&#34;_blank&#34;&gt;Syntastic&lt;/a&gt; Vim plugin and configure
&lt;a href=&#34;http://eslint.org/&#34; target=&#34;_blank&#34;&gt;ESLint&lt;/a&gt; on it.&lt;/p&gt;

&lt;p&gt;At first sight (reading Syntastic github README.md file) it seems to be very
easy to do it and it is when you use a global instance of ESLint, however all
Node.js projects I work have ESLint specific rules and versions.&lt;/p&gt;

&lt;p&gt;Checkout below the snippet that must be added to your &lt;code&gt;~/.vimrc&lt;/code&gt; file to setup
local ESLint (or any other linter) support to your projects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; Syntastic local linter support

let g:syntastic_javascript_checkers = []

function CheckJavaScriptLinter(filepath, linter)
	if exists(&#39;b:syntastic_checkers&#39;)
		return
	endif
	if filereadable(a:filepath)
		let b:syntastic_checkers = [a:linter]
		let {&#39;b:syntastic_&#39; . a:linter . &#39;_exec&#39;} = a:filepath
	endif
endfunction

function SetupJavaScriptLinter()
	let l:current_folder = expand(&#39;%:p:h&#39;)
	let l:bin_folder = fnamemodify(syntastic#util#findFileInParent(&#39;package.json&#39;, l:current_folder), &#39;:h&#39;)
	let l:bin_folder = l:bin_folder . &#39;/node_modules/.bin/&#39;
	call CheckJavaScriptLinter(l:bin_folder . &#39;standard&#39;, &#39;standard&#39;)
	call CheckJavaScriptLinter(l:bin_folder . &#39;eslint&#39;, &#39;eslint&#39;)
endfunction

autocmd FileType javascript call SetupJavaScriptLinter()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above basically searches for binary files in the &lt;code&gt;node_modules/.bin&lt;/code&gt;
folder of the current nodejs project. The snippet above covers &lt;code&gt;eslint&lt;/code&gt; and
&lt;code&gt;standard&lt;/code&gt; linters.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m new to Vim / Vim Script, suggestions are welcome!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microservices and Consumer-Driven Contracts Tests</title>
      <link>http://nunes.io/notes/article/microservices-and-consumer-driven-contracts-tests/</link>
      <pubDate>Mon, 07 Mar 2016 20:48:00 -0300</pubDate>
      
      <guid>http://nunes.io/notes/article/microservices-and-consumer-driven-contracts-tests/</guid>
      <description>&lt;p&gt;Due to its distributed nature, integration / end-to-end tests in microservices
are hard to do, either by the number of microservices required to cover the test
case or by the time it takes to run them. A good alternative to solve the
problem are the consumer-driven contracts tests.&lt;/p&gt;

&lt;p&gt;Consumer-Driven Contracts tests focus on the contract established between two
services but from the point of view of the consumer. Consider the following
scenario:&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Profile Service&lt;/strong&gt; is responsible to store and provide information about
users of the application like their contact information, addresses, metadata,
avatar, etc and the &lt;strong&gt;E-Mail Service&lt;/strong&gt; is responsible to send e-mails based on a
&lt;code&gt;profile id&lt;/code&gt;. In order to send the e-mail the &lt;strong&gt;E-Mail Service&lt;/strong&gt; needs to load
the current data of the profile but not all data, the only information it needs
is the profile name and e-mail address.&lt;/p&gt;

&lt;p&gt;In the scenario above the E-Mail Service is a consumer of the Profile Service.
The E-Mail Service expects that the Profile Service is going to send the name
and the e-mail address of the profile in a specific format, there is a contract
established between them. The Profile Service has its unit and service tests to
ensure all profile data is returned based on its internal business logic,
whenever the Profile Service changes the returned data its unit and service
tests will break, e.g. the birth date was a required information and from now on
it is not available anymore on the Profile Service. Even when a change in the
Profile Service breaks its tests doesn&amp;rsquo;t mean that the contracts between the
Profile Service and others are broken, in the scenario above the birth date
wasn&amp;rsquo;t an expected value by the E-Mail Service.&lt;/p&gt;

&lt;p&gt;A Consumer-Driven Contract test would check if the Profile Service returns only
the information that the E-Mail Service needs. Back to the example above, if the
Profile Service from now on doesn&amp;rsquo;t return the e-mail address then the
Consumer-Driven Contract test will fail. The failure of the Consumer-Driven
Contract test doesn&amp;rsquo;t mean that the Profile Service implementation is not
correct, it means there is a breaking change between Profile Service and E-Mail
Service.  Based on the failure of the test the E-Mail Service team must be
notified in order to adapt E-Mail Service to the new contract.&lt;/p&gt;

&lt;p&gt;The Consumer-Driven Contract tests should be part of the continuos integration /
deployment pipeline of the producer service. Ideally the tests must be developed
by the team that owns the producer with the help of the team that own the
consumer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clean Code: Meaningful Names</title>
      <link>http://nunes.io/notes/book/clean-code-meaningful-names/</link>
      <pubDate>Sun, 28 Feb 2016 19:06:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/book/clean-code-meaningful-names/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you have to read the source code to understand the meaning of a variable
name it is because that&amp;rsquo;s a bad name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a list of best practices on namming variables, classes, functions /
methods, interfaces and enums:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communicate your intent;&lt;/li&gt;
&lt;li&gt;Avoid disinformation;&lt;/li&gt;
&lt;li&gt;Pronounceable names;&lt;/li&gt;
&lt;li&gt;Avoid encodings (e.g. Hungarian notation);&lt;/li&gt;
&lt;li&gt;Classes, variables names should be nouns;&lt;/li&gt;
&lt;li&gt;Methods / functions should have verb names;&lt;/li&gt;
&lt;li&gt;Boolean methods should have names as predicates (e.g. isAuthenticated);&lt;/li&gt;
&lt;li&gt;Variables should have short names in small scopes and long names in large
scopes;&lt;/li&gt;
&lt;li&gt;Functions should have long names in small scopes and short names in large
scopes;&lt;/li&gt;
&lt;li&gt;Classes should have long names in private scopes and short names in public
scopes;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Any fool can write code that a computer can understand. Good programmers write
code that humans can understand. (Martin Fowler, 2008)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Learning Notebook</title>
      <link>http://nunes.io/blog/learning-notebook/</link>
      <pubDate>Sun, 28 Feb 2016 15:10:00 +0000</pubDate>
      
      <guid>http://nunes.io/blog/learning-notebook/</guid>
      <description>

&lt;p&gt;A repository of notes taken during the process of learn something.&lt;/p&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;During our daily learning process we consume a lot of information from articles,
blog posts, books, tweets, videos, chat with working colleagues, etc.
Unfortunately must part of us can&amp;rsquo;t hold all information we consume for the rest
of our lives, some times it doesn&amp;rsquo;t even last a couple of weeks in our memory.&lt;/p&gt;

&lt;p&gt;It is a good exercise to take notes of things your learn for future reference.
How many times have you had to dig Google trying to find some article that you
read in the past and forgot to take a note of it, specially when you find a very
interesting article but it is not directly related to the main topic that you
were searching for?&lt;/p&gt;

&lt;p&gt;Some of the benefits of the note taking practice are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to help you remind of topics that are not fresh in your memory anymore;&lt;/li&gt;
&lt;li&gt;as reference to write articles, books, tweets, etc;&lt;/li&gt;
&lt;li&gt;as reference to prepare material in order to speak in conferences;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you haven&amp;rsquo;t read the whole article, book, etc, it is still valid to take
notes of it, to write a few words / an overview, so in the future you can easily
back to it.&lt;/p&gt;

&lt;h2 id=&#34;public-learning-notebook&#34;&gt;Public Learning Notebook&lt;/h2&gt;

&lt;p&gt;You might be a bit concerned about sharing your notes but think about the
benefits of it. By making them public everybody can learn with it, people can
subscribe to your RSS feed, add comments and suggestion in order to enhance the
quality of the information.&lt;/p&gt;

&lt;p&gt;Although all your notes will be public and they may help other people, don&amp;rsquo;t
mind about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the structure of them;&lt;/li&gt;
&lt;li&gt;if they are well written and clear;&lt;/li&gt;
&lt;li&gt;if other people will understand them;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Is Go an Object Oriented Language?</title>
      <link>http://nunes.io/notes/article/is-go-an-object-oriented-language/</link>
      <pubDate>Mon, 22 Feb 2016 18:14:00 -0300</pubDate>
      
      <guid>http://nunes.io/notes/article/is-go-an-object-oriented-language/</guid>
      <description>&lt;p&gt;This article was written by Steve Francia, the author of
&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt;. Hugo is an amazing static website engine written in
&lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt;. As I&amp;rsquo;m in the process of learning go I decided to
look at Steve&amp;rsquo;s blog posts trying to find more information about both Hugo and
Go.&lt;/p&gt;

&lt;p&gt;The article tries to list what makes a programming language support OOP design.
It points out a brief information about OOP concepts like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inheritance And Polymorphism;&lt;/li&gt;
&lt;li&gt;Single &amp;amp; Multiple Inheritance;&lt;/li&gt;
&lt;li&gt;Subtyping (Polymorphism);&lt;/li&gt;
&lt;li&gt;Object Composition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The article describes how and which of those concepts Go supports.&lt;/p&gt;

&lt;p&gt;Steve, as most part of &lt;em&gt;modern&lt;/em&gt; software development communities, considers
Inheritance as a bad practice. In order to fundament his opinion Steve quotes
James Gosling (Java&amp;rsquo;s inventor) and mentions that GoF book discusses at length
replacing implementation (extends) with interface inheritance (implements).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Boot clj: Examples</title>
      <link>http://nunes.io/notes/guide/boot-clj-examples/</link>
      <pubDate>Sun, 21 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/guide/boot-clj-examples/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/leblowl/lokate/blob/master/build.boot&#34; target=&#34;_blank&#34;&gt;https://github.com/leblowl/lokate/blob/master/build.boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Boot clj: Install Instructions</title>
      <link>http://nunes.io/notes/guide/boot-clj-install-instructions/</link>
      <pubDate>Sun, 21 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/guide/boot-clj-install-instructions/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# update brew to install latest install script
brew update; brew install boot-clj
# run any boot command to force install
boot -h
# the install script output that a new version was available
# and after running `boot -h again` it installed the latest version.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MongoDB: Backup and Restore</title>
      <link>http://nunes.io/notes/guide/mongodb-backup-and-restore/</link>
      <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/guide/mongodb-backup-and-restore/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# backup a specific database
mongodump --host 192.168.1.2 --port 27017 --db database_name --username mongodevdb --password YourSecretPwd
# the backup will generated in the current folder + dump

# restore a specific database
mongorestore --host 192.168.1.2 --port 27017 --db database_name --username mongodevdb --password YourSecretPwd --drop /backup/dump
# the --drop argument drops the database before restore - be careful
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker: How to set docker0 ip address</title>
      <link>http://nunes.io/notes/guide/docker-how-to-set-docker0-ip-address/</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/guide/docker-how-to-set-docker0-ip-address/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DOCKER_OPTS=&amp;quot;--bip=172.17.42.1/16&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker: Saving memory and CPU</title>
      <link>http://nunes.io/notes/guide/docker-saving-memory-and-cpu/</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/guide/docker-saving-memory-and-cpu/</guid>
      <description>&lt;p&gt;Docker spawns a &lt;code&gt;docker-proxy&lt;/code&gt; application whenever you run a docker container.
The application is responsible to proxy ports between the host machine and
the container. I&amp;rsquo;m not sure when but newer versions of Linux Kernel support
a special network flag that makes &lt;code&gt;docker-proxy&lt;/code&gt; obsolete.&lt;/p&gt;

&lt;p&gt;In order to save memory and CPU you must run docker daemon setting the flag
&lt;code&gt;--userland-proxy=false&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DOCKER_OPTS=&amp;quot;--userland-proxy=false&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Emacs: How to install on Mac OS X</title>
      <link>http://nunes.io/notes/guide/emacs-how-to-install-on-mac-os-x/</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/guide/emacs-how-to-install-on-mac-os-x/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install emacs --with-cocoa --srgb
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Emacs: Keyboard shortcuts</title>
      <link>http://nunes.io/notes/guide/emacs-keyboard-shortcuts/</link>
      <pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nunes.io/notes/guide/emacs-keyboard-shortcuts/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;M-:&lt;/kbd&gt; - Evaluate Emacs Lisp expression&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-;&lt;/kbd&gt; - Comment line / block&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-_&lt;/kbd&gt; - Undo&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;ESC-&amp;lt;&lt;/kbd&gt; - Top of the file&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;ESC-&amp;gt;&lt;/kbd&gt; - Bottom of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;window-management&#34;&gt;Window management&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;C-x 5 2&lt;/kbd&gt; - Create new frame&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-x 5 0&lt;/kbd&gt; - Close current frame&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-x 2&lt;/kbd&gt; - Vertical frame split&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-x 3&lt;/kbd&gt; - Horizontal frame split&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-x o&lt;/kbd&gt; - Move to &lt;em&gt;other&lt;/em&gt; window&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dired&#34;&gt;Dired&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;d&lt;/kbd&gt; - Mark file to deletion&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;x&lt;/kbd&gt; - Execute marked changes (e.g. delete marked files)&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;g&lt;/kbd&gt; - Refresh&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
